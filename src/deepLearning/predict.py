# coding: utf-8
import sys, os
from two_layer_net import TwoLayerNet
import numpy as np
import pickle
import pathlib

# commonフォルダ内読み込みのため
deepLearning_dir = pathlib.Path(__file__).parent
src_dir = deepLearning_dir.parent
root_dir = src_dir.parent
dir_lst = [deepLearning_dir, src_dir, root_dir]
for dir_name in dir_lst:
    if str(dir_name) not in sys.path:
        sys.path.append(str(dir_name))

from common.RaceDB import RaceDB
from common.HorseDB import HorseDB

INPUT_PATH = str(root_dir) + "\\dst\\trainedParam\\"

network = TwoLayerNet(input_size=131, hidden_size=40, output_size=24)

# 学習済みパラメータの読み込み
for key in ('W1', 'b1', 'W2', 'b2'):
    with open(INPUT_PATH + key + ".pickle", 'rb') as f:
        network.params[key] = pickle.load(f)

# 予測したいデータX
# https://db.netkeiba.com/race/202106050511
X = [0, 0, 0, 0, 0, 1, 0, 0, 0.9343434343434344, 0.4444444444444444, 0.6666666666666666, 1.0, 0.3871725531973012, 0.24821765139719743, 0.14750471195607637, 0.09833647463738425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.695004738053337, 0.852748070935427, 0.7158860159740084, 0.8616826857993771, 0.852748070935427, 0.8509543793150128, 0.6818397184242587, 0.7209286584540409, 1.0, 0.6925680249086232, 0.8683498037092188, 0.7019087586300257, 0.718491945309327, 0.874441586571003, 0.702314877487478, 0.8456748341681332, 0.7897213855421686, 0.7897213855421686, 0.7897213855421686, 0.7897213855421686, 0.7897213855421686, 0.7897213855421686, 0.7897213855421686, 0.7897213855421686, 0.8833333333333333, 0.9416666666666667, 0.9, 0.9333333333333333, 0.8833333333333333, 0.9333333333333333, 0.9, 0.9333333333333333, 0.8833333333333333, 0.8833333333333333, 0.9333333333333333, 0.8833333333333333, 0.9166666666666666, 0.9166666666666666, 0.9333333333333333, 0.9, 0.9098958333333333, 0.9098958333333333, 0.9098958333333333, 0.9098958333333333, 0.9098958333333333, 0.9098958333333333, 0.9098958333333333, 0.9098958333333333, 0.2689414213699951, 0.0066928509242848554, 0.0003353501304664781, 0.11920292202211755, 0.0009110511944006454, 0.04742587317756678, 0.01798620996209156, 0.0009110511944006454, 0.01798620996209156, 0.0024726231566347743, 0.11920292202211755, 0.0003353501304664781, 0.04742587317756678, 0.0066928509242848554, 0.0024726231566347743, 0.2689414213699951, 0.2689414213699951, 0.11920292202211755, 0.04742587317756678, 0.01798620996209156, 0.0066928509242848554, 0.0024726231566347743, 0.0009110511944006454, 0.0003353501304664781, 0.6083962683251888, 0.11128387383385162, 0.6776988005330964, 0.5935139937805419, 0.056863616170590846, 0.3996001776988005, 1.0, 0.5788538427365615, 0.4888938249666815, 0.4247001332741004, 0.1928031985784096, 0.06152820968458463, 0.13616170590848511, 0.6163927143491782, 0.4857840959573523, 0.6650377609951132, 0.011106175033318524, 0.011106175033318524, 0.011106175033318524, 0.011106175033318524, 0.011106175033318524, 0.011106175033318524, 0.011106175033318524, 0.011106175033318524]
X = np.array(X)
X = X.reshape([1, -1])

# predict
ans = network.predict(X)
print("ans = ", ans)
